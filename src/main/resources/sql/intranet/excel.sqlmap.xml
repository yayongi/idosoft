<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="excel">
	
	<!-- 경비 - 월별 통계 (개인 이력) -->
	<select id="EXCEL0001" parameterType="hashmap" resultType="java.util.LinkedHashMap">
	SELECT 
		CONVERT((@rownum := @rownum+1), CHAR) '번호'
		, A.MEMBER_NO '사번'
		, D.CODE_NAME '경비유형'
		, A.USE_CN '내용'
		, B.NAME '이름'
		, C.CODE_NAME '직급'
		, CONVERT(A.USE_AMOUNT, CHAR) '결제금액'
		, A.USE_DATE '결제일'
		, E.NAME '1차 결재자'
		, CONVERT(A.FIR_SANCTN_DATETIME, CHAR) '1차 결재일'
		, F.NAME '2차 결재자'
		, CONVERT(A.SCD_SANCTN_DATETIME, CHAR) '2차 결재일'
		, CONVERT(A.REG_DATETIME, CHAR) '등록일'
	FROM TB_EXPENSE A
	LEFT JOIN TB_MEMBER B
		ON A.MEMBER_NO = B.MEMBER_NO
	LEFT JOIN TB_CODE C
		ON B.POSITION = C.CODE_ID
	LEFT JOIN TB_CODE D
		ON A.EXPENS_TY_CODE = D.CODE_ID
	LEFT JOIN TB_MEMBER E
		ON A.FIR_SANCTENER_MEMBER_NO = E.MEMBER_NO
	LEFT JOIN TB_MEMBER F
		ON A.SANCTNER_MEMBER_NO = F.MEMBER_NO
	JOIN (SELECT @rownum := 0) R
	<where>
		AND A.MEMBER_NO = #{MEMBER_NO}
		AND DATE_FORMAT(A.REG_DATETIME, '%Y-%m-%d') 
			BETWEEN DATE_FORMAT(#{REG_START_DATE}, '%Y-%m-%d') 
				AND DATE_FORMAT(#{REG_END_DATE}, '%Y-%m-%d')
		AND A.SANCTN_STTUS_CODE = 'SS0002'
	</where> 
	ORDER BY A.REG_DATETIME ASC 
	</select>
	
	<!-- 경비 - 월별 통계 -->
	<select id="EXCEL0002" parameterType="hashmap" resultType="java.util.LinkedHashMap">
	SELECT CONVERT(@rownum := @rownum+1, CHAR) '번호', A.* 
	FROM(
		SELECT 
				B.NAME '이름'
				, C.CODE_NAME '직급'
				, CONVERT(SUM(A.USE_AMOUNT), CHAR) '총금액'
			FROM 
				TB_EXPENSE A
				LEFT JOIN TB_MEMBER B
				ON A.MEMBER_NO = B.MEMBER_NO
				LEFT JOIN TB_CODE C
				ON B.POSITION = C.CODE_ID
				JOIN (SELECT @rownum := 0) R
			WHERE 
				DATE_FORMAT(A.REG_DATETIME, '%Y-%m-%d') 
					
				AND A.SANCTN_STTUS_CODE = 'SS0002'
			GROUP BY A.MEMBER_NO
			ORDER BY B.NAME ASC
	) A
	</select>
	
	<!-- 경비 관리 -->
	<select id="EXCEL0003" parameterType="hashmap" resultType="java.util.LinkedHashMap">
	SELECT CONVERT((@rownum := @rownum+1), CHAR) '번호', T.* FROM (
		SELECT 
			 A.MEMBER_NO '사번'
			, D.CODE_NAME '경비유형'
			, A.USE_CN '내용'
			, B.NAME '이름'
			, C.CODE_NAME '직급'
			, IFNULL(CONVERT(A.USE_AMOUNT, CHAR),'') '결제금액'
			, A.USE_DATE '결제일'
			, E.NAME '1차 결재자'
			, IFNULL(CONVERT(A.FIR_SANCTN_DATETIME, CHAR), '') '1차 결재일'
			, F.NAME '2차 결재자'
			, G.CODE_NAME '결재상태'
			, IFNULL(CONVERT(A.SCD_SANCTN_DATETIME, CHAR), '') '2차 결재일'
			, IFNULL(CONVERT(A.REG_DATETIME, CHAR), '') '등록일'
		FROM TB_EXPENSE A
		LEFT JOIN TB_MEMBER B
			ON A.MEMBER_NO = B.MEMBER_NO
		LEFT JOIN TB_CODE C
			ON B.POSITION = C.CODE_ID
		LEFT JOIN TB_CODE D
			ON A.EXPENS_TY_CODE = D.CODE_ID
		LEFT JOIN TB_MEMBER E
			ON A.FIR_SANCTENER_MEMBER_NO = E.MEMBER_NO
		LEFT JOIN TB_MEMBER F
			ON A.SANCTNER_MEMBER_NO = F.MEMBER_NO
		LEFT JOIN TB_CODE G
			ON A.SANCTN_STTUS_CODE = G.CODE_ID
		JOIN (SELECT @rownum := 0) R
		<where>
			<if test="isAdmin != 1">
				<if test="isAdmin != 1">
				AND A.MEMBER_NO = #{MEMBER_NO}
				</if>
			</if>
			<if test="name != null and name !=''">
				AND B.NAME LIKE CONCAT('%',#{name},'%')
			</if>
			<if test="expenseType != null">
				AND A.EXPENS_TY_CODE = #{expenseType}
			</if>
			<if test="status != null">
				AND A.SANCTN_STTUS_CODE = #{status}
			</if>
			<if test="memo != null and memo !=''">
				AND A.USE_CN LIKE CONCAT('%',#{memo},'%')
			</if>
			AND DATE_FORMAT(A.USE_DATE, '%Y-%m-%d') BETWEEN DATE_FORMAT(#{payStDt}, '%Y-%m-%d') AND DATE_FORMAT(#{payEdDt}, '%Y-%m-%d')
		</where>
		ORDER BY A.SANCTN_STTUS_CODE ASC, A.EXPENS_NO DESC
	) T
	</select>
	<!-- 경비/결재 관리 -->
	<select id="EXCEL0004" parameterType="hashmap" resultType="java.util.LinkedHashMap">
	SELECT CONVERT((@rownum := @rownum+1), CHAR) '번호', T.* FROM (
		SELECT 
			 A.MEMBER_NO '사번'
			, D.CODE_NAME '경비유형'
			, A.USE_CN '내용'
			, B.NAME '이름'
			, C.CODE_NAME '직급'
			, IFNULL(CONVERT(A.USE_AMOUNT, CHAR),'') '결제금액'
			, A.USE_DATE '결제일'
			, G.CODE_NAME '결재상태'
			, E.NAME '1차 결재자'
			, IFNULL(CONVERT(A.FIR_SANCTN_DATETIME, CHAR), '') '1차 결재일'
			, F.NAME '2차 결재자'
			, IFNULL(CONVERT(A.SCD_SANCTN_DATETIME, CHAR), '') '2차 결재일'
			, IFNULL(CONVERT(A.REG_DATETIME, CHAR), '') '등록일'
		FROM TB_EXPENSE A
		LEFT JOIN TB_MEMBER B
			ON A.MEMBER_NO = B.MEMBER_NO
		LEFT JOIN TB_CODE C
			ON B.POSITION = C.CODE_ID
		LEFT JOIN TB_CODE D
			ON A.EXPENS_TY_CODE = D.CODE_ID
		LEFT JOIN TB_MEMBER E
			ON A.FIR_SANCTENER_MEMBER_NO = E.MEMBER_NO
		LEFT JOIN TB_MEMBER F
			ON A.SANCTNER_MEMBER_NO = F.MEMBER_NO
		LEFT JOIN TB_CODE G
			ON A.SANCTN_STTUS_CODE = G.CODE_ID
		JOIN (SELECT @rownum := 0) R
		<where>
			<if test="isAdmin != 1">
				<if test="MEMBER_NO != null">
					AND (
						A.FIR_SANCTENER_MEMBER_NO=#{MEMBER_NO} 
						OR A.SANCTNER_MEMBER_NO=#{MEMBER_NO}
					)
				</if>
			</if>
			<if test="name != null and name !=''">
				AND B.NAME LIKE CONCAT('%',#{name},'%')
			</if>
			<if test="expenseType != null">
				AND A.EXPENS_TY_CODE = #{expenseType}
			</if>
			<if test="status != null">
				AND A.SANCTN_STTUS_CODE = #{status}
			</if>
			<if test="memo != null and memo !=''">
				AND A.USE_CN LIKE CONCAT('%',#{memo},'%')
			</if>
			AND DATE_FORMAT(A.USE_DATE, '%Y-%m-%d') BETWEEN DATE_FORMAT(#{payStDt}, '%Y-%m-%d') AND DATE_FORMAT(#{payEdDt}, '%Y-%m-%d')
		</where>
		ORDER BY A.SANCTN_STTUS_CODE ASC, A.EXPENS_NO DESC
	) T
	</select>
	<!-- 통신비 년별 조회 -->
	<select id="EXCEL0005_1" parameterType="hashmap" resultType="java.util.LinkedHashMap">
	SELECT 
	*
	FROM
	(
		SELECT
			A.MEMBER_NO '사번',
			A.NAME '이름',
			B.CODE_NAME '직급',
			('') '구분',
			CASE WHEN 
			CONCAT(#{YEAR}, '-01-01') <![CDATA[ >= ]]> CONCAT(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m'), '-01') 									/* 입사일 기준 처리 조건 */
			<![CDATA[ && ]]> CONCAT(DATE_FORMAT(NOW(), '%Y-%m'), '-01') <![CDATA[ > ]]> CONCAT(#{YEAR}, '-01-01') 											/* 현재일 기준 처리 조건 */
			<![CDATA[ && ]]> CONCAT(#{YEAR}, '-01-01') <![CDATA[ < ]]> CONCAT(DATE_FORMAT(IFNULL(A.RET_DATE,'9999-12-31'), '%Y-%m'), '-01') 		/* 퇴사일 기준 처리 조건 */
			THEN IF(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m') <![CDATA[ >= ]]> DATE_FORMAT(CONCAT(#{YEAR}, '-01-01'), '%Y-%m')					/* 그달에 입사한 경우 */
			, ROUND((B.NOTE / DATE_FORMAT(LAST_DAY(CONCAT(#{YEAR}, '-01-01')), '%d')) 
			* (DATEDIFF(LAST_DAY(CONCAT(#{YEAR}, '-01-01')), DATE_FORMAT(A.ENTRY_DATE, '%Y-%m-%d')) + 1))
			, B.NOTE) 																																	
			ELSE '0' END AS "1월",
			
			CASE WHEN 
			DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 1 MONTH) <![CDATA[ >= ]]> CONCAT(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m'), '-01') 
			<![CDATA[ && ]]> CONCAT(DATE_FORMAT(NOW(), '%Y-%m'), '-01') <![CDATA[ > ]]> DATE_ADD(CONCAT(#{YEAR}, '-02-01'), INTERVAL 1 MONTH) 
			<![CDATA[ && ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 1 MONTH) <![CDATA[ < ]]> CONCAT(DATE_FORMAT(IFNULL(A.RET_DATE,'9999-12-31'), '%Y-%m'), '-01')
			THEN IF(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m') <![CDATA[ >= ]]> DATE_FORMAT(CONCAT(#{YEAR}, '-02-01'), '%Y-%m')					/* 그달에 입사한 경우 */
			, ROUND((B.NOTE / DATE_FORMAT(LAST_DAY(CONCAT(#{YEAR}, '-02-01')), '%d')) 
			* (DATEDIFF(LAST_DAY(CONCAT(#{YEAR}, '-02-01')), DATE_FORMAT(A.ENTRY_DATE, '%Y-%m-%d')) + 1))
			, B.NOTE) 
			ELSE '0' END AS "2월",
			CASE WHEN
			DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 2 MONTH) <![CDATA[ >= ]]> CONCAT(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m'), '-01') 
			<![CDATA[ && ]]> CONCAT(DATE_FORMAT(NOW(), '%Y-%m'), '-01') <![CDATA[ > ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 2 MONTH) 
			<![CDATA[ && ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 2 MONTH) <![CDATA[ < ]]> CONCAT(DATE_FORMAT(IFNULL(A.RET_DATE,'9999-12-31'), '%Y-%m'), '-01')
			THEN IF(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m') <![CDATA[ >= ]]> DATE_FORMAT(CONCAT(#{YEAR}, '-03-01'), '%Y-%m')					/* 그달에 입사한 경우 */
			, ROUND((B.NOTE / DATE_FORMAT(LAST_DAY(CONCAT(#{YEAR}, '-03-01')), '%d')) 
			* (DATEDIFF(LAST_DAY(CONCAT(#{YEAR}, '-03-01')), DATE_FORMAT(A.ENTRY_DATE, '%Y-%m-%d')) + 1))
			, B.NOTE) 
			ELSE '0' END AS "3월",
			CASE WHEN
			DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 3 MONTH) <![CDATA[ >= ]]> CONCAT(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m'), '-01') 
			<![CDATA[ && ]]> CONCAT(DATE_FORMAT(NOW(), '%Y-%m'), '-01') <![CDATA[ > ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 3 MONTH) 
			<![CDATA[ && ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 3 MONTH) <![CDATA[ < ]]> CONCAT(DATE_FORMAT(IFNULL(A.RET_DATE,'9999-12-31'), '%Y-%m'), '-01')
			THEN IF(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m') <![CDATA[ >= ]]> DATE_FORMAT(CONCAT(#{YEAR}, '-04-01'), '%Y-%m')					/* 그달에 입사한 경우 */
			, ROUND((B.NOTE / DATE_FORMAT(LAST_DAY(CONCAT(#{YEAR}, '-04-01')), '%d')) 
			* (DATEDIFF(LAST_DAY(CONCAT(#{YEAR}, '-04-01')), DATE_FORMAT(A.ENTRY_DATE, '%Y-%m-%d')) + 1))
			, B.NOTE) 
			ELSE '0' END AS "4월",
			CASE WHEN DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 4 MONTH) <![CDATA[ >= ]]> CONCAT(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m'), '-01') 
			<![CDATA[ && ]]> CONCAT(DATE_FORMAT(NOW(), '%Y-%m'), '-01') <![CDATA[ > ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 4 MONTH) 
			<![CDATA[ && ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 4 MONTH) <![CDATA[ < ]]> CONCAT(DATE_FORMAT(IFNULL(A.RET_DATE,'9999-12-31'), '%Y-%m'), '-01')
			THEN IF(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m') <![CDATA[ >= ]]> DATE_FORMAT(CONCAT(#{YEAR}, '-05-01'), '%Y-%m')					/* 그달에 입사한 경우 */
			, ROUND((B.NOTE / DATE_FORMAT(LAST_DAY(CONCAT(#{YEAR}, '-05-01')), '%d')) 
			* (DATEDIFF(LAST_DAY(CONCAT(#{YEAR}, '-05-01')), DATE_FORMAT(A.ENTRY_DATE, '%Y-%m-%d')) + 1))
			, B.NOTE) 
			ELSE '0' END AS "5월",
			CASE WHEN DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 5 MONTH) <![CDATA[ >= ]]> CONCAT(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m'), '-01') 
			<![CDATA[ && ]]> CONCAT(DATE_FORMAT(NOW(), '%Y-%m'), '-01') <![CDATA[ > ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 5 MONTH) 
			<![CDATA[ && ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 5 MONTH) <![CDATA[ < ]]> CONCAT(DATE_FORMAT(IFNULL(A.RET_DATE,'9999-12-31'), '%Y-%m'), '-01')
			THEN IF(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m') <![CDATA[ >= ]]> DATE_FORMAT(CONCAT(#{YEAR}, '-06-01'), '%Y-%m')					/* 그달에 입사한 경우 */
			, ROUND((B.NOTE / DATE_FORMAT(LAST_DAY(CONCAT(#{YEAR}, '-06-01')), '%d')) 
			* (DATEDIFF(LAST_DAY(CONCAT(#{YEAR}, '-06-01')), DATE_FORMAT(A.ENTRY_DATE, '%Y-%m-%d')) + 1))
			, B.NOTE)
			ELSE '0' END AS "6월",
			CASE WHEN DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 6 MONTH) <![CDATA[ >= ]]> CONCAT(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m'), '-01') 
			<![CDATA[ && ]]> CONCAT(DATE_FORMAT(NOW(), '%Y-%m'), '-01') <![CDATA[ > ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 6 MONTH) 
			<![CDATA[ && ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 6 MONTH) <![CDATA[ < ]]> CONCAT(DATE_FORMAT(IFNULL(A.RET_DATE,'9999-12-31'), '%Y-%m'), '-01')
			THEN IF(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m') <![CDATA[ >= ]]> DATE_FORMAT(CONCAT(#{YEAR}, '-07-01'), '%Y-%m')					/* 그달에 입사한 경우 */
			, ROUND((B.NOTE / DATE_FORMAT(LAST_DAY(CONCAT(#{YEAR}, '-07-01')), '%d')) 
			* (DATEDIFF(LAST_DAY(CONCAT(#{YEAR}, '-07-01')), DATE_FORMAT(A.ENTRY_DATE, '%Y-%m-%d')) + 1))
			, B.NOTE) 
			ELSE '0' END AS "7월",
			CASE WHEN DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 7 MONTH) <![CDATA[ >= ]]> CONCAT(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m'), '-01') 
			<![CDATA[ && ]]> CONCAT(DATE_FORMAT(NOW(), '%Y-%m'), '-01') <![CDATA[ > ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 7 MONTH) 
			<![CDATA[ && ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 7 MONTH) <![CDATA[ < ]]> CONCAT(DATE_FORMAT(IFNULL(A.RET_DATE,'9999-12-31'), '%Y-%m'), '-01')
			THEN IF(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m') <![CDATA[ >= ]]> DATE_FORMAT(CONCAT(#{YEAR}, '-08-01'), '%Y-%m')					/* 그달에 입사한 경우 */
			, ROUND((B.NOTE / DATE_FORMAT(LAST_DAY(CONCAT(#{YEAR}, '-08-01')), '%d')) 
			* (DATEDIFF(LAST_DAY(CONCAT(#{YEAR}, '-08-01')), DATE_FORMAT(A.ENTRY_DATE, '%Y-%m-%d')) + 1))
			, B.NOTE)  
			ELSE '0' END AS "8월",
			CASE WHEN DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 8 MONTH) <![CDATA[ >= ]]> CONCAT(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m'), '-01') 
			<![CDATA[ && ]]> CONCAT(DATE_FORMAT(NOW(), '%Y-%m'), '-01') <![CDATA[ > ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 8 MONTH) 
			<![CDATA[ && ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 8 MONTH) <![CDATA[ < ]]> CONCAT(DATE_FORMAT(IFNULL(A.RET_DATE,'9999-12-31'), '%Y-%m'), '-01')
			THEN IF(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m') <![CDATA[ >= ]]> DATE_FORMAT(CONCAT(#{YEAR}, '-09-01'), '%Y-%m')					/* 그달에 입사한 경우 */
			, ROUND((B.NOTE / DATE_FORMAT(LAST_DAY(CONCAT(#{YEAR}, '-09-01')), '%d')) 
			* (DATEDIFF(LAST_DAY(CONCAT(#{YEAR}, '-09-01')), DATE_FORMAT(A.ENTRY_DATE, '%Y-%m-%d')) + 1))
			, B.NOTE) 
			ELSE '0' END AS "9월",
			CASE WHEN DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 9 MONTH) <![CDATA[ >= ]]> CONCAT(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m'), '-01') 
			<![CDATA[ && ]]> CONCAT(DATE_FORMAT(NOW(), '%Y-%m'), '-01') <![CDATA[ > ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 9 MONTH) 
			<![CDATA[ && ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 9 MONTH) <![CDATA[ < ]]> CONCAT(DATE_FORMAT(IFNULL(A.RET_DATE,'9999-12-31'), '%Y-%m'), '-01')
			THEN IF(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m') <![CDATA[ >= ]]> DATE_FORMAT(CONCAT(#{YEAR}, '-10-01'), '%Y-%m')					/* 그달에 입사한 경우 */
			, ROUND((B.NOTE / DATE_FORMAT(LAST_DAY(CONCAT(#{YEAR}, '-10-01')), '%d')) 
			* (DATEDIFF(LAST_DAY(CONCAT(#{YEAR}, '-10-01')), DATE_FORMAT(A.ENTRY_DATE, '%Y-%m-%d')) + 1))
			, B.NOTE)   
			ELSE '0' END AS "10월",
			CASE WHEN DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 10 MONTH) <![CDATA[ >= ]]> CONCAT(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m'), '-01') 
			<![CDATA[ && ]]> CONCAT(DATE_FORMAT(NOW(), '%Y-%m'), '-01') <![CDATA[ > ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 10 MONTH) 
			<![CDATA[ && ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 10 MONTH) <![CDATA[ < ]]> CONCAT(DATE_FORMAT(IFNULL(A.RET_DATE,'9999-12-31'), '%Y-%m'), '-01')
			THEN IF(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m') <![CDATA[ >= ]]> DATE_FORMAT(CONCAT(#{YEAR}, '-11-01'), '%Y-%m')					/* 그달에 입사한 경우 */
			, ROUND((B.NOTE / DATE_FORMAT(LAST_DAY(CONCAT(#{YEAR}, '-11-01')), '%d')) 
			* (DATEDIFF(LAST_DAY(CONCAT(#{YEAR}, '-11-01')), DATE_FORMAT(A.ENTRY_DATE, '%Y-%m-%d')) + 1))
			, B.NOTE) 
			ELSE '0' END AS "11월",
			CASE WHEN DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 11 MONTH) <![CDATA[ >= ]]> CONCAT(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m'), '-01') 
			<![CDATA[ && ]]> CONCAT(DATE_FORMAT(NOW(), '%Y-%m'), '-01') <![CDATA[ > ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 11 MONTH) 
			<![CDATA[ && ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 11 MONTH) <![CDATA[ < ]]> CONCAT(DATE_FORMAT(IFNULL(A.RET_DATE,'9999-12-31'), '%Y-%m'), '-01')
			THEN IF(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m') <![CDATA[ >= ]]> DATE_FORMAT(CONCAT(#{YEAR}, '-12-01'), '%Y-%m')					/* 그달에 입사한 경우 */
			, ROUND((B.NOTE / DATE_FORMAT(LAST_DAY(CONCAT(#{YEAR}, '-12-01')), '%d')) 
			* (DATEDIFF(LAST_DAY(CONCAT(#{YEAR}, '-12-01')), DATE_FORMAT(A.ENTRY_DATE, '%Y-%m-%d')) + 1))
			, B.NOTE) 
			ELSE '0' END AS "12월"
		FROM TB_MEMBER A
		LEFT JOIN TB_CODE B
		ON A.POSITION = B.CODE_ID
		JOIN (SELECT @rownum := 0) R
		<where>
			<if test="isAdmin != 1">
				AND A.MEMBER_NO = #{MEMBER_NO}
			</if>
			AND A.MEMBER_NO != '99999999'
		</where>
		ORDER BY A.NAME ASC
	) T
	<if test='isAdmin == 1'>
	UNION ALL
	SELECT 'ALL' AS "사번",'전체' AS '이름', '' AS '직급' ,'' AS '구분', SUM(T.1월) "1월", SUM(T.2월) "2월"
			, SUM(T.3월) "3월", SUM(T.4월) "4월", SUM(T.5월) "5월"
			, SUM(T.6월) "6월", SUM(T.7월) "7월", SUM(T.8월) "8월"
			, SUM(T.9월) "9월", SUM(T.10월) "10월", SUM(T.11월) 11월, SUM(T.12월) "12월"
	FROM (
		SELECT
			CASE WHEN 
			CONCAT(#{YEAR}, '-01-01') <![CDATA[ >= ]]> CONCAT(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m'), '-01') 									/* 입사일 기준 처리 조건 */
			<![CDATA[ && ]]> CONCAT(DATE_FORMAT(NOW(), '%Y-%m'), '-01') <![CDATA[ > ]]> CONCAT(#{YEAR}, '-01-01') 											/* 현재일 기준 처리 조건 */
			<![CDATA[ && ]]> CONCAT(#{YEAR}, '-01-01') <![CDATA[ < ]]> CONCAT(DATE_FORMAT(IFNULL(A.RET_DATE,'9999-12-31'), '%Y-%m'), '-01') 		/* 퇴사일 기준 처리 조건 */
			THEN IF(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m') <![CDATA[ >= ]]> DATE_FORMAT(CONCAT(#{YEAR}, '-01-01'), '%Y-%m')					/* 그달에 입사한 경우 */
			, ROUND((B.NOTE / DATE_FORMAT(LAST_DAY(CONCAT(#{YEAR}, '-01-01')), '%d')) 
			* (DATEDIFF(LAST_DAY(CONCAT(#{YEAR}, '-01-01')), DATE_FORMAT(A.ENTRY_DATE, '%Y-%m-%d')) + 1))
			, B.NOTE)																																	
			ELSE 0 END AS "1월",
			CASE WHEN 
			DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 1 MONTH) <![CDATA[ >= ]]> CONCAT(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m'), '-01') 
			<![CDATA[ && ]]> CONCAT(DATE_FORMAT(NOW(), '%Y-%m'), '-01') <![CDATA[ > ]]> DATE_ADD(CONCAT(#{YEAR}, '-02-01'), INTERVAL 1 MONTH) 
			<![CDATA[ && ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 1 MONTH) <![CDATA[ < ]]> CONCAT(DATE_FORMAT(IFNULL(A.RET_DATE,'9999-12-31'), '%Y-%m'), '-01')
			THEN IF(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m') <![CDATA[ >= ]]> DATE_FORMAT(CONCAT(#{YEAR}, '-02-01'), '%Y-%m')					/* 그달에 입사한 경우 */
			, ROUND((B.NOTE / DATE_FORMAT(LAST_DAY(CONCAT(#{YEAR}, '-02-01')), '%d')) 
			* (DATEDIFF(LAST_DAY(CONCAT(#{YEAR}, '-02-01')), DATE_FORMAT(A.ENTRY_DATE, '%Y-%m-%d')) + 1))
			, B.NOTE) 
			ELSE '0' END AS "2월",
			CASE WHEN
			DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 2 MONTH) <![CDATA[ >= ]]> CONCAT(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m'), '-01') 
			<![CDATA[ && ]]> CONCAT(DATE_FORMAT(NOW(), '%Y-%m'), '-01') <![CDATA[ > ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 2 MONTH) 
			<![CDATA[ && ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 2 MONTH) <![CDATA[ < ]]> CONCAT(DATE_FORMAT(IFNULL(A.RET_DATE,'9999-12-31'), '%Y-%m'), '-01')
			THEN IF(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m') <![CDATA[ >= ]]> DATE_FORMAT(CONCAT(#{YEAR}, '-03-01'), '%Y-%m')					/* 그달에 입사한 경우 */
			, ROUND((B.NOTE / DATE_FORMAT(LAST_DAY(CONCAT(#{YEAR}, '-03-01')), '%d')) 
			* (DATEDIFF(LAST_DAY(CONCAT(#{YEAR}, '-03-01')), DATE_FORMAT(A.ENTRY_DATE, '%Y-%m-%d')) + 1))
			, B.NOTE) 
			ELSE '0' END AS "3월",
			CASE WHEN
			DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 3 MONTH) <![CDATA[ >= ]]> CONCAT(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m'), '-01') 
			<![CDATA[ && ]]> CONCAT(DATE_FORMAT(NOW(), '%Y-%m'), '-01') <![CDATA[ > ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 3 MONTH) 
			<![CDATA[ && ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 3 MONTH) <![CDATA[ < ]]> CONCAT(DATE_FORMAT(IFNULL(A.RET_DATE,'9999-12-31'), '%Y-%m'), '-01')
			THEN IF(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m') <![CDATA[ >= ]]> DATE_FORMAT(CONCAT(#{YEAR}, '-04-01'), '%Y-%m')					/* 그달에 입사한 경우 */
			, ROUND((B.NOTE / DATE_FORMAT(LAST_DAY(CONCAT(#{YEAR}, '-04-01')), '%d')) 
			* (DATEDIFF(LAST_DAY(CONCAT(#{YEAR}, '-04-01')), DATE_FORMAT(A.ENTRY_DATE, '%Y-%m-%d')) + 1))
			, B.NOTE) 
			ELSE '0' END AS "4월",
			CASE WHEN DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 4 MONTH) <![CDATA[ >= ]]> CONCAT(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m'), '-01') 
			<![CDATA[ && ]]> CONCAT(DATE_FORMAT(NOW(), '%Y-%m'), '-01') <![CDATA[ > ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 4 MONTH) 
			<![CDATA[ && ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 4 MONTH) <![CDATA[ < ]]> CONCAT(DATE_FORMAT(IFNULL(A.RET_DATE,'9999-12-31'), '%Y-%m'), '-01')
			THEN IF(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m') <![CDATA[ >= ]]> DATE_FORMAT(CONCAT(#{YEAR}, '-05-01'), '%Y-%m')					/* 그달에 입사한 경우 */
			, ROUND((B.NOTE / DATE_FORMAT(LAST_DAY(CONCAT(#{YEAR}, '-05-01')), '%d')) 
			* (DATEDIFF(LAST_DAY(CONCAT(#{YEAR}, '-05-01')), DATE_FORMAT(A.ENTRY_DATE, '%Y-%m-%d')) + 1))
			, B.NOTE) 
			ELSE '0' END AS "5월",
			CASE WHEN DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 5 MONTH) <![CDATA[ >= ]]> CONCAT(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m'), '-01') 
			<![CDATA[ && ]]> CONCAT(DATE_FORMAT(NOW(), '%Y-%m'), '-01') <![CDATA[ > ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 5 MONTH) 
			<![CDATA[ && ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 5 MONTH) <![CDATA[ < ]]> CONCAT(DATE_FORMAT(IFNULL(A.RET_DATE,'9999-12-31'), '%Y-%m'), '-01')
			THEN IF(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m') <![CDATA[ >= ]]> DATE_FORMAT(CONCAT(#{YEAR}, '-06-01'), '%Y-%m')					/* 그달에 입사한 경우 */
			, ROUND((B.NOTE / DATE_FORMAT(LAST_DAY(CONCAT(#{YEAR}, '-06-01')), '%d')) 
			* (DATEDIFF(LAST_DAY(CONCAT(#{YEAR}, '-06-01')), DATE_FORMAT(A.ENTRY_DATE, '%Y-%m-%d')) + 1))
			, B.NOTE)
			ELSE '0' END AS "6월",
			CASE WHEN DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 6 MONTH) <![CDATA[ >= ]]> CONCAT(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m'), '-01') 
			<![CDATA[ && ]]> CONCAT(DATE_FORMAT(NOW(), '%Y-%m'), '-01') <![CDATA[ > ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 6 MONTH) 
			<![CDATA[ && ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 6 MONTH) <![CDATA[ < ]]> CONCAT(DATE_FORMAT(IFNULL(A.RET_DATE,'9999-12-31'), '%Y-%m'), '-01')
			THEN IF(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m') <![CDATA[ >= ]]> DATE_FORMAT(CONCAT(#{YEAR}, '-07-01'), '%Y-%m')					/* 그달에 입사한 경우 */
			, ROUND((B.NOTE / DATE_FORMAT(LAST_DAY(CONCAT(#{YEAR}, '-07-01')), '%d')) 
			* (DATEDIFF(LAST_DAY(CONCAT(#{YEAR}, '-07-01')), DATE_FORMAT(A.ENTRY_DATE, '%Y-%m-%d')) + 1))
			, B.NOTE) 
			ELSE '0' END AS "7월",
			CASE WHEN DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 7 MONTH) <![CDATA[ >= ]]> CONCAT(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m'), '-01') 
			<![CDATA[ && ]]> CONCAT(DATE_FORMAT(NOW(), '%Y-%m'), '-01') <![CDATA[ > ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 7 MONTH) 
			<![CDATA[ && ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 7 MONTH) <![CDATA[ < ]]> CONCAT(DATE_FORMAT(IFNULL(A.RET_DATE,'9999-12-31'), '%Y-%m'), '-01')
			THEN IF(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m') <![CDATA[ >= ]]> DATE_FORMAT(CONCAT(#{YEAR}, '-08-01'), '%Y-%m')					/* 그달에 입사한 경우 */
			, ROUND((B.NOTE / DATE_FORMAT(LAST_DAY(CONCAT(#{YEAR}, '-08-01')), '%d')) 
			* (DATEDIFF(LAST_DAY(CONCAT(#{YEAR}, '-08-01')), DATE_FORMAT(A.ENTRY_DATE, '%Y-%m-%d')) + 1))
			, B.NOTE)  
			ELSE '0' END AS "8월",
			CASE WHEN DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 8 MONTH) <![CDATA[ >= ]]> CONCAT(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m'), '-01') 
			<![CDATA[ && ]]> CONCAT(DATE_FORMAT(NOW(), '%Y-%m'), '-01') <![CDATA[ > ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 8 MONTH) 
			<![CDATA[ && ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 8 MONTH) <![CDATA[ < ]]> CONCAT(DATE_FORMAT(IFNULL(A.RET_DATE,'9999-12-31'), '%Y-%m'), '-01')
			THEN IF(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m') <![CDATA[ >= ]]> DATE_FORMAT(CONCAT(#{YEAR}, '-09-01'), '%Y-%m')					/* 그달에 입사한 경우 */
			, ROUND((B.NOTE / DATE_FORMAT(LAST_DAY(CONCAT(#{YEAR}, '-09-01')), '%d')) 
			* (DATEDIFF(LAST_DAY(CONCAT(#{YEAR}, '-09-01')), DATE_FORMAT(A.ENTRY_DATE, '%Y-%m-%d')) + 1))
			, B.NOTE) 
			ELSE '0' END AS "9월",
			CASE WHEN DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 9 MONTH) <![CDATA[ >= ]]> CONCAT(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m'), '-01') 
			<![CDATA[ && ]]> CONCAT(DATE_FORMAT(NOW(), '%Y-%m'), '-01') <![CDATA[ > ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 9 MONTH) 
			<![CDATA[ && ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 9 MONTH) <![CDATA[ < ]]> CONCAT(DATE_FORMAT(IFNULL(A.RET_DATE,'9999-12-31'), '%Y-%m'), '-01')
			THEN IF(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m') <![CDATA[ >= ]]> DATE_FORMAT(CONCAT(#{YEAR}, '-10-01'), '%Y-%m')					/* 그달에 입사한 경우 */
			, ROUND((B.NOTE / DATE_FORMAT(LAST_DAY(CONCAT(#{YEAR}, '-10-01')), '%d')) 
			* (DATEDIFF(LAST_DAY(CONCAT(#{YEAR}, '-10-01')), DATE_FORMAT(A.ENTRY_DATE, '%Y-%m-%d')) + 1))
			, B.NOTE)   
			ELSE '0' END AS "10월",
			CASE WHEN DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 10 MONTH) <![CDATA[ >= ]]> CONCAT(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m'), '-01') 
			<![CDATA[ && ]]> CONCAT(DATE_FORMAT(NOW(), '%Y-%m'), '-01') <![CDATA[ > ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 10 MONTH) 
			<![CDATA[ && ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 10 MONTH) <![CDATA[ < ]]> CONCAT(DATE_FORMAT(IFNULL(A.RET_DATE,'9999-12-31'), '%Y-%m'), '-01')
			THEN IF(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m') <![CDATA[ >= ]]> DATE_FORMAT(CONCAT(#{YEAR}, '-11-01'), '%Y-%m')					/* 그달에 입사한 경우 */
			, ROUND((B.NOTE / DATE_FORMAT(LAST_DAY(CONCAT(#{YEAR}, '-11-01')), '%d')) 
			* (DATEDIFF(LAST_DAY(CONCAT(#{YEAR}, '-11-01')), DATE_FORMAT(A.ENTRY_DATE, '%Y-%m-%d')) + 1))
			, B.NOTE) 
			ELSE '0' END AS "11월",
			CASE WHEN DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 11 MONTH) <![CDATA[ >= ]]> CONCAT(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m'), '-01') 
			<![CDATA[ && ]]> CONCAT(DATE_FORMAT(NOW(), '%Y-%m'), '-01') <![CDATA[ > ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 11 MONTH) 
			<![CDATA[ && ]]> DATE_ADD(CONCAT(#{YEAR}, '-01-01'), INTERVAL 11 MONTH) <![CDATA[ < ]]> CONCAT(DATE_FORMAT(IFNULL(A.RET_DATE,'9999-12-31'), '%Y-%m'), '-01')
			THEN IF(DATE_FORMAT(A.ENTRY_DATE, '%Y-%m') <![CDATA[ >= ]]> DATE_FORMAT(CONCAT(#{YEAR}, '-12-01'), '%Y-%m')					/* 그달에 입사한 경우 */
			, ROUND((B.NOTE / DATE_FORMAT(LAST_DAY(CONCAT(#{YEAR}, '-12-01')), '%d')) 
			* (DATEDIFF(LAST_DAY(CONCAT(#{YEAR}, '-12-01')), DATE_FORMAT(A.ENTRY_DATE, '%Y-%m-%d')) + 1))
			, B.NOTE) 
			ELSE '0' END AS "12월"
		FROM TB_MEMBER A
		LEFT JOIN TB_CODE B
		ON A.POSITION = B.CODE_ID
		<where>
			<if test="isAdmin != 1">
				AND A.MEMBER_NO = #{MEMBER_NO}
			</if>
			AND A.MEMBER_NO != '99999999'
		</where>
		ORDER BY A.NAME ASC
	) T
	</if>
	</select>
	<!-- 교통비 년별 조회 -->
	<select id="EXCEL0005_2" parameterType="hashmap" resultType="java.util.LinkedHashMap">
	SELECT A.MEMBER_NO mno
	, DATE_FORMAT(A.INPT_BGNDE, '%Y-%m-%d') startDate
	, DATE_FORMAT(A.INPT_ENDDE, '%Y-%m-%d') endDate
	, B.TRANSPORT_CT ct
	FROM TB_PROJECT_MEMBER A 
	LEFT JOIN TB_PROJECT B
	ON A.PROJECT_NO = B.PROJECT_NO
	<where>
		<if test="isAdmin != 1">
			AND A.MEMBER_NO = #{MEMBER_NO}
		</if>
		AND A.EMPLOYEE_TYPE = 'EM0000'
		AND A.MEMBER_NO != '99999999'
		AND (DATE_FORMAT(A.INPT_BGNDE, '%Y') = #{YEAR}
		OR DATE_FORMAT(A.INPT_ENDDE, '%Y') = #{YEAR})
	</where>
	</select>
	<select id="EXCEL0005_3" parameterType="hashmap" resultType="string">
	SELECT MEMBER_NO 
	FROM TB_MEMBER
	<where>
		<if test="isAdmin != 1">
			AND MEMBER_NO = #{MEMBER_NO}
		</if>
		AND MEMBER_NO != '99999999'
	</where>
	ORDER BY NAME ASC
	</select>
	<!-- 주유비 년별 조회 -->
	<select id="EXCEL0005_4" parameterType="hashmap" resultType="java.util.LinkedHashMap">
	SELECT MEMBER_NO mno
	, DATE_FORMAT(INPT_BGNDE, '%Y-%m-%d') startDate
	, DATE_FORMAT(INPT_ENDDE, '%Y-%m-%d') endDate
	, (
		SELECT NOTE 
		FROM TB_CODE
		WHERE CODE_ID='AM0000'
	) ct 
	FROM TB_PROJECT_TRAFFIC
	<where>
		<if test="isAdmin != 1">
			AND MEMBER_NO = #{MEMBER_NO}
		</if>
		AND MEMBER_NO != '99999999'
		AND (DATE_FORMAT(INPT_BGNDE, '%Y') = #{YEAR}
		OR DATE_FORMAT(INPT_ENDDE, '%Y') = #{YEAR})
	</where>
	</select>
	<!-- 이력 조회 -->
	<select id="EXCEL0006" parameterType="hashmap" resultType="java.util.LinkedHashMap">
	SELECT
		CONCAT(MEM.NAME) '이름'
		, CONCAT(HIST.MEMBER_NO) '사번'
		, CONCAT(HIST.PROJECT_NM) '프로젝트명'
		, CONCAT(HIST.INSTT_NM) '발주처명'
		, CONCAT(HIST.INPT_BGNDE) '투입일'
		, CONCAT(HIST.INPT_ENDDE) '철수일'
		, CONCAT(HIST.CHRG_JOB) '담당업무'
		, CONCAT(HIST.USE_LANG) '비고(사용언어)'
	FROM TB_MEM_HIST AS HIST
	LEFT JOIN TB_MEMBER AS MEM ON MEM.MEMBER_NO = HIST.MEMBER_NO
	<where>
		<if test="isAdmin != 1">
			AND HIST.MEMBER_NO = #{MEMBER_NO}
		</if>
	</where>
	ORDER BY HIST.MEMBER_NO DESC, INPT_BGNDE DESC
	</select>
</mapper>
